/* automatically generated by rust-bindgen 0.69.4 */

pub type vsomeip_service_t = u16;
pub type vsomeip_instance_t = u16;
pub type vsomeip_method_t = u16;
pub type vsomeip_eventgroup_t = u16;
pub type vsomeip_event_t = u16;
pub type vsomeip_major_version_t = u8;
pub type vsomeip_minor_version_t = u32;
pub type vsomeip_message_t = u32;
pub type vsomeip_client_t = u16;
pub type vsomeip_session_t = u16;
pub const SAMPLE_SERVICE_ID: vsomeip_service_t = 4660;
pub const SAMPLE_INSTANCE_ID: vsomeip_instance_t = 22136;
pub const SAMPLE_METHOD_ID: vsomeip_instance_t = 28673;
pub const SAMPLE_EVENT_ID: vsomeip_method_t = 1;
pub const SAMPLE_EVENTGROUP_ID: vsomeip_eventgroup_t = 256;
#[doc = " @brief vsomeip client request/response config"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vsomeip_reqest_config_t {
    #[doc = " @brief SOME/IP Service ID for request/response"]
    pub service: vsomeip_service_t,
    #[doc = " @brief SOME/IP Instance ID for request/response"]
    pub instance: vsomeip_instance_t,
    #[doc = " @brief SOME/IP Method ID or request/response"]
    pub method: vsomeip_method_t,
    #[doc = " @brief SOME/IP Service major version. May be needed if service/someip\n impl register with major != 0"]
    pub service_major: vsomeip_major_version_t,
    #[doc = " @brief SOME/IP Service minor version"]
    pub service_minor: vsomeip_minor_version_t,
}
#[test]
fn bindgen_test_layout_vsomeip_reqest_config_t() {
    const UNINIT: ::std::mem::MaybeUninit<vsomeip_reqest_config_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vsomeip_reqest_config_t>(),
        12usize,
        concat!("Size of: ", stringify!(vsomeip_reqest_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<vsomeip_reqest_config_t>(),
        4usize,
        concat!("Alignment of ", stringify!(vsomeip_reqest_config_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vsomeip_reqest_config_t),
            "::",
            stringify!(service)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instance) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(vsomeip_reqest_config_t),
            "::",
            stringify!(instance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vsomeip_reqest_config_t),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_major) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(vsomeip_reqest_config_t),
            "::",
            stringify!(service_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_minor) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vsomeip_reqest_config_t),
            "::",
            stringify!(service_minor)
        )
    );
}
#[doc = " @brief vsomeip client event config"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vsomeip_event_config_t {
    #[doc = " @brief SOME/IP Service ID to subscribe"]
    pub service: vsomeip_service_t,
    #[doc = " @brief SOME/IP Instance ID to subscribe"]
    pub instance: vsomeip_instance_t,
    #[doc = " @brief SOME/IP EventGroup ID"]
    pub event_group: vsomeip_eventgroup_t,
    #[doc = " @brief SOME/IP Event ID"]
    pub event: vsomeip_event_t,
    #[doc = " @brief SOME/IP Service major version. May be needed if service/someip\n impl register with major != 0"]
    pub service_major: vsomeip_major_version_t,
}
#[test]
fn bindgen_test_layout_vsomeip_event_config_t() {
    const UNINIT: ::std::mem::MaybeUninit<vsomeip_event_config_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vsomeip_event_config_t>(),
        10usize,
        concat!("Size of: ", stringify!(vsomeip_event_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<vsomeip_event_config_t>(),
        2usize,
        concat!("Alignment of ", stringify!(vsomeip_event_config_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vsomeip_event_config_t),
            "::",
            stringify!(service)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instance) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(vsomeip_event_config_t),
            "::",
            stringify!(instance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event_group) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vsomeip_event_config_t),
            "::",
            stringify!(event_group)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(vsomeip_event_config_t),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_major) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vsomeip_event_config_t),
            "::",
            stringify!(service_major)
        )
    );
}
#[doc = " @brief SOME/IP Client configuration.\n\n NOTE: There is a dependency on app_name and config file specified in\n VSOMEIP_CONFIGURATION environment variable."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vsomeip_config_t {
    #[doc = " @brief vsomeip Application Name. Must match provided app_config json file!\n Also defined in \"VSOMEIP_APPLICATION_NAME\" environment variable."]
    pub app_name: *mut ::std::os::raw::c_char,
    #[doc = " @brief Just a reference to exported \"VSOMEIP_CONFIGURATION\" environment variable"]
    pub config_file: *mut ::std::os::raw::c_char,
    #[doc = " @brief If true, reliable endpoits should be used, depends on the notify server configuration"]
    pub use_tcp: bool,
    #[doc = " @brief someip client debug verbosity (0=quiet, ...)"]
    pub debug: i32,
    pub event_config: vsomeip_event_config_t,
    pub service_config: vsomeip_reqest_config_t,
}
#[test]
fn bindgen_test_layout_vsomeip_config_t() {
    const UNINIT: ::std::mem::MaybeUninit<vsomeip_config_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vsomeip_config_t>(),
        48usize,
        concat!("Size of: ", stringify!(vsomeip_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<vsomeip_config_t>(),
        8usize,
        concat!("Alignment of ", stringify!(vsomeip_config_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).app_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vsomeip_config_t),
            "::",
            stringify!(app_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config_file) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vsomeip_config_t),
            "::",
            stringify!(config_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_tcp) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vsomeip_config_t),
            "::",
            stringify!(use_tcp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).debug) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vsomeip_config_t),
            "::",
            stringify!(debug)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event_config) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vsomeip_config_t),
            "::",
            stringify!(event_config)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_config) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(vsomeip_config_t),
            "::",
            stringify!(service_config)
        )
    );
}
#[doc = " @brief callback std::function for handling incoming SOME/IP payload\n\n @param payload uint8_t* someip notification payload\n @param size someip payload size\n @return <0 on error"]
pub type message_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        service: vsomeip_service_t,
        instance: vsomeip_instance_t,
        event: vsomeip_method_t,
        payload: *const u8,
        payload_size: usize,
    ) -> i32,
>;
pub type availability_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        service: vsomeip_service_t,
        instance: vsomeip_instance_t,
        is_available: bool,
    ) -> i32,
>;
#[doc = " @brief vsomeip adapter context"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vsomeip_adapter_context_t {
    pub context: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_vsomeip_adapter_context_t() {
    const UNINIT: ::std::mem::MaybeUninit<vsomeip_adapter_context_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vsomeip_adapter_context_t>(),
        8usize,
        concat!("Size of: ", stringify!(vsomeip_adapter_context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<vsomeip_adapter_context_t>(),
        8usize,
        concat!("Alignment of ", stringify!(vsomeip_adapter_context_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vsomeip_adapter_context_t),
            "::",
            stringify!(context)
        )
    );
}
extern "C" {
    pub fn vsomeip_adapter_init_from_environment(config: *mut vsomeip_config_t);
}
extern "C" {
    pub fn create_vsomeip_adapter(
        config: *mut vsomeip_config_t,
        message_cb: message_callback_t,
        availability_cb: availability_callback_t,
    ) -> *mut vsomeip_adapter_context_t;
}
extern "C" {
    pub fn destroy_vsomeip_adapter(ctx: *mut vsomeip_adapter_context_t);
}
extern "C" {
    pub fn vsomeip_adapter_send_service_request(
        ctx: *const vsomeip_adapter_context_t,
        service: vsomeip_service_t,
        instance: vsomeip_instance_t,
        method: vsomeip_method_t,
        payload: *const u8,
        payload_size: usize,
    ) -> i32;
}
extern "C" {
    pub fn vsomeip_adapter_init(ctx: *const vsomeip_adapter_context_t) -> i32;
}
extern "C" {
    pub fn vsomeip_adapter_start(ctx: *const vsomeip_adapter_context_t) -> i32;
}
extern "C" {
    pub fn vsomeip_adapter_stop(ctx: *const vsomeip_adapter_context_t) -> i32;
}
